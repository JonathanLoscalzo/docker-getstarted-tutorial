# This essentially makes it swarm mode compatible
version: "3"
services:
  #Run 5 instances of that image as a service called web
  web:
    # Pull the image we uploaded in step 2 from the registry.
    image: jloscalzo/get-started:part2
    deploy:
      replicas: 5
      # limiting each one to use, at most, 10% of the CPU (across all cores)
      resources:
        limits:
          cpus: "0.1"
          #50MB of RAM.
          memory: 50M
      # Immediately restart containers if one fails.
      restart_policy:
        condition: on-failure
    # Map port 80 on the host to web’s port 80.
    ports:
      - "80:80"
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    # a volumes key, giving the visualizer access to the host’s socket file for Docker, 
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      # a placement key, ensuring that this service only ever runs on a swarm manager – never a worker
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
    # Instruct web’s containers to share port 80 via a load-balanced network called webnet. 
    # (Internally, the containers themselves will publish to web’s port 80 at an ephemeral port.)
    networks:
      - webnet
# Define the webnet network with the default settings (which is a load-balanced overlay network).
networks:
  webnet: